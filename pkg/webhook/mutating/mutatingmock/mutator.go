// Code generated by mockery v2.12.2. DO NOT EDIT.

package mutatingmock

import (
	context "context"

	model "github.com/slok/kubewebhook/v2/pkg/model"
	mock "github.com/stretchr/testify/mock"

	mutating "github.com/slok/kubewebhook/v2/pkg/webhook/mutating"

	testing "testing"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Mutator is an autogenerated mock type for the Mutator type
type Mutator struct {
	mock.Mock
}

// Mutate provides a mock function with given fields: ctx, ar, obj
func (_m *Mutator) Mutate(ctx context.Context, ar *model.AdmissionReview, obj v1.Object) (*mutating.MutatorResult, error) {
	ret := _m.Called(ctx, ar, obj)

	var r0 *mutating.MutatorResult
	if rf, ok := ret.Get(0).(func(context.Context, *model.AdmissionReview, v1.Object) *mutating.MutatorResult); ok {
		r0 = rf(ctx, ar, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mutating.MutatorResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AdmissionReview, v1.Object) error); ok {
		r1 = rf(ctx, ar, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMutator creates a new instance of Mutator. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMutator(t testing.TB) *Mutator {
	mock := &Mutator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
